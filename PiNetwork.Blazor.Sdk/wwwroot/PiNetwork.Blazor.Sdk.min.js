function onIncompletePaymentFound(n){alert("PiNetwork.Blazor.Sdk.js: onIncompletePaymentFound trigered");alert(JSON.stringify(n));myDotNetHelper.invokeMethodAsync("CreatePaymentOnIncopletePaymentFound",n)}const scopes=["payments","username"];let myDotNetHelper;(function(){window.PiNetworkBlazorSdk={Authenticate:function(n,t){myDotNetHelper=n;Pi.authenticate(scopes,onIncompletePaymentFound).then(function(i){n.invokeMethodAsync("AuthenticateOnSuccess",i,t)}).catch(function(t){n.invokeMethodAsync("AuthenticateOnError",t)})},CreatePayment:function(n,t,i,r){Pi.createPayment({amount:t,memo:i,metadata:{orderId:r}},{onReadyForServerApproval:function(t){n.invokeMethodAsync("CreatePaymentOnReadyForServerApproval",t)},onReadyForServerCompletion:function(t,i){n.invokeMethodAsync("CreatePaymentOnReadyForServerCompletion",t,i)},onCancel:function(t){alert("onCancel. paymentId "+t);n.invokeMethodAsync("CreatePaymentOnCancel",t)},onError:function(t,i){alert("onError. error"+JSON.stringify(t)+" payment "+JSON.stringify(i));n.invokeMethodAsync("CreatePaymentOnError",t,i)}})},OpenShareDialog:function(n,t){Pi.openShareDialog(n,t)},Test:function(){return DotNet.invokeMethodAsync("PiNetwork.Blazor.Sdk","Test","Testing text from invoked").then(n=>{alert(n)}),"Testing text from return"}};window.Browser={IsPiNetworkBrowser:function(n){navigator.userAgent.toLowerCase().includes("pibrowser")&&(Pi.init({version:"2.0"}),n.invokeMethodAsync("IsPiNetworkBrowser"))}};window.Test2=n=>{n.invokeMethodAsync("Test2","testas2")}})();